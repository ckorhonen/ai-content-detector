import { Hono } from 'hono'
import { cors } from 'hono/cors'
import { renderToString } from 'react-dom/server'
import App from './App'

type Bindings = {
  AI: any;
  RATE_LIMITER: KVNamespace;
}

const app = new Hono<{ Bindings: Bindings }>()

// Enable CORS
app.use('*', cors())

// Rate limiting middleware
const rateLimit = async (c: any, next: any) => {
  const ip = c.req.header('cf-connecting-ip') || 'unknown'
  const key = `rate-limit:${ip}`
  const now = Date.now()
  
  try {
    // Get current rate limit data
    const data = await c.env.RATE_LIMITER?.get(key, 'json') || { count: 0, resetAt: now + 60000 }
    
    // Reset if time window has passed
    if (now > data.resetAt) {
      data.count = 0
      data.resetAt = now + 60000 // 1 minute window
    }
    
    // Check rate limit (10 requests per minute)
    if (data.count >= 10) {
      return c.json({ 
        error: 'Rate limit exceeded. Please try again later.',
        resetAt: new Date(data.resetAt).toISOString()
      }, 429)
    }
    
    // Increment counter
    data.count++
    await c.env.RATE_LIMITER?.put(key, JSON.stringify(data), { expirationTtl: 120 })
  } catch (error) {
    console.error('Rate limiting error:', error)
    // Continue if rate limiting fails
  }
  
  await next()
}

// Serve the React app
app.get('/', (c) => {
  const html = `
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>AI Content Detector</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <style>
          body { margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif; }
        </style>
      </head>
      <body>
        <div id="root"></div>
        <script type="module" src="/src/main.tsx"></script>
      </body>
    </html>
  `
  return c.html(html)
})

// Text detection endpoint
app.post('/api/detect-text', rateLimit, async (c) => {
  try {
    const { text } = await c.req.json()
    
    // Validation
    if (!text || typeof text !== 'string') {
      return c.json({ error: 'Text is required and must be a string' }, 400)
    }
    
    if (text.length < 10) {
      return c.json({ error: 'Text must be at least 10 characters long' }, 400)
    }
    
    if (text.length > 10000) {
      return c.json({ error: 'Text must be less than 10,000 characters' }, 400)
    }
    
    // Use Cloudflare AI for text analysis
    const prompt = `Analyze the following text and determine if it was likely generated by AI. Consider factors like writing style, patterns, repetition, and naturalness. Respond with ONLY a JSON object in this exact format: {"isAI": true/false, "confidence": 0.0-1.0, "reasoning": "brief explanation"}

Text to analyze:
${text}`

    const response = await c.env.AI.run('@cf/meta/llama-2-7b-chat-int8', {
      messages: [
        { role: 'system', content: 'You are an AI content detection expert. Always respond with valid JSON only.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 256
    })
    
    // Parse AI response
    let analysis
    try {
      const content = response.response || JSON.stringify(response)
      // Extract JSON from response
      const jsonMatch = content.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0])
      } else {
        // Fallback analysis based on simple heuristics
        const aiIndicators = [
          'as an ai', 'i am an ai', 'language model', 'i don\'t have personal',
          'i cannot', 'i\'m sorry, but', 'regenerate response'
        ]
        const hasAiIndicators = aiIndicators.some(indicator => 
          text.toLowerCase().includes(indicator)
        )
        
        analysis = {
          isAI: hasAiIndicators,
          confidence: hasAiIndicators ? 0.75 : 0.35,
          reasoning: hasAiIndicators ? 
            'Text contains common AI-generated phrases' : 
            'Unable to determine with high confidence'
        }
      }
    } catch (parseError) {
      console.error('Parse error:', parseError)
      // Fallback to basic detection
      analysis = {
        isAI: false,
        confidence: 0.5,
        reasoning: 'Analysis completed with basic heuristics'
      }
    }
    
    return c.json({
      success: true,
      isAiGenerated: analysis.isAI || false,
      confidence: analysis.confidence || 0.5,
      reasoning: analysis.reasoning || 'Analysis completed',
      type: 'text',
      model: '@cf/meta/llama-2-7b-chat-int8'
    })
    
  } catch (error: any) {
    console.error('Text detection error:', error)
    return c.json({ 
      success: false, 
      error: 'Text detection failed', 
      details: error.message 
    }, 500)
  }
})

// Image detection endpoint
app.post('/api/detect-image', rateLimit, async (c) => {
  try {
    const contentType = c.req.header('content-type') || ''
    
    if (!contentType.includes('multipart/form-data')) {
      return c.json({ error: 'Request must be multipart/form-data' }, 400)
    }
    
    const formData = await c.req.formData()
    const image = formData.get('image')
    
    if (!image || !(image instanceof File)) {
      return c.json({ error: 'Image file is required' }, 400)
    }
    
    // Validate file size (max 5MB)
    if (image.size > 5 * 1024 * 1024) {
      return c.json({ error: 'Image must be less than 5MB' }, 400)
    }
    
    // Validate file type
    if (!image.type.startsWith('image/')) {
      return c.json({ error: 'File must be an image' }, 400)
    }
    
    // Convert image to array buffer
    const imageBuffer = await image.arrayBuffer()
    const imageArray = Array.from(new Uint8Array(imageBuffer))
    
    // Use Cloudflare AI for image classification
    const response = await c.env.AI.run('@cf/microsoft/resnet-50', {
      image: imageArray
    })
    
    // Analyze results for AI-generated indicators
    // Common AI-generated image characteristics in ResNet classifications
    const aiIndicators = [
      'digital art', 'computer graphics', 'rendered', 'synthetic',
      'artificial', 'generated', 'gan', 'diffusion'
    ]
    
    let maxConfidence = 0
    let hasAiIndicator = false
    
    if (response && Array.isArray(response)) {
      for (const item of response) {
        const label = (item.label || '').toLowerCase()
        const score = item.score || 0
        
        if (aiIndicators.some(indicator => label.includes(indicator))) {
          hasAiIndicator = true
          maxConfidence = Math.max(maxConfidence, score)
        }
      }
    }
    
    // Calculate AI probability
    const isAiGenerated = hasAiIndicator && maxConfidence > 0.3
    const confidence = hasAiIndicator ? maxConfidence : 0.5
    
    return c.json({
      success: true,
      isAiGenerated,
      confidence,
      reasoning: isAiGenerated ? 
        'Image shows characteristics of AI-generated content' : 
        'Image appears to be naturally created or photograph',
      type: 'image',
      model: '@cf/microsoft/resnet-50',
      classifications: response ? response.slice(0, 5) : []
    })
    
  } catch (error: any) {
    console.error('Image detection error:', error)
    return c.json({ 
      success: false, 
      error: 'Image detection failed', 
      details: error.message 
    }, 500)
  }
})

// Health check endpoint
app.get('/api/health', (c) => {
  return c.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  })
})

export default app
